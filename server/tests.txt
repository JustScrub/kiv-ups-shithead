TRADE TEST COMPLEX:
    disable mm_player_thread
    code
    {
    game_t *gm = calloc(1, sizeof(game_t));
    game_create(pl,gm);
    printD("serv_acc: game_id=%d\n", gm->id);
    pl->hand[0] = 2; pl->hand[1] = 1; pl->hand[6] = 1;
    pl->face_up[0] = 4; pl->face_up[1] = 5; pl->face_up[2] = 6;
    comm_flag_t ret;
    strcpy(pl->nick, "test");

    printD("serv_acc: gm_state_result=%d\n", ret=pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GAME_STATE,gm, sizeof(gm)));
    if(ret != COMM_OK) goto end;
    player_trade_cards(gm,0);
    if(pl->comm_if.conn_state != PL_CONN_UP) goto end;
    printD("serv_acc: gm_state_result=%d\n", ret=pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GAME_STATE,gm, sizeof(gm)));

    end:
    game_delete(gm);
    close(connfd);
    free(pl);
    }

TRADE TEST SIMPLE:
    code {
    int j = 0;
    printD("serv_acc: comm_result=%d\n", pl->comm_if.send_request(pl->comm_if.cd, SRRQ_TRADE_NOW, &j, sizeof(int)));
    printD("serv_acc: data=%d %d %d\n", ((char *)&j)[0], ((char *)&j)[1], ((char *)&j)[2]);
    }

LOBBIES TEST 0:
    code {
    // 4 players, 3 games | 2 lobbies, one lobby with 1 player, second with 2
    for(int i=0; i<4; i++) {
        players[i] = calloc(1,sizeof(player_t)); 
        player_create(players[i]); 
        players[i]->comm_if.conn_state = 1;
    }
    for(int i=0; i<3; i++) {
        games[i] = calloc(1,sizeof(game_t)); 
        game_create(players[i],games[i]);
    }
    game_add_player(games[0], players[3]);
    (games[1])->state = GM_PLAYING;

    //printD("serv_acc: pl1=%p, g1pl0=%p\n", players[0]+1, (games[1])->players[0]);

    printD("serv_acc: \n\t game_0: %d:%d \n\t game_1: %d:%d \n\t game_2: %d:%d\n",
        game_player_count(games[0]), (games[0])->state, // 2:0
        game_player_count(games[1]), (games[1])->state, // 1:2
        game_player_count(games[2]), (games[2])->state); // 1:0

    unsigned *lobbies; int i;
    i = get_lobby_games(&lobbies);
    printD("serv_acc: |lobbies|=%d\n", i); // 6
    printD("serv_acc: comm_result=%d\n", pl->comm_if.send_request(pl->comm_if.cd, SRRQ_LOBBIES, lobbies, (i)*sizeof(unsigned)));

    free(lobbies);
    game_delete(games[0]);
    game_delete(games[1]);
    game_delete(games[2]);
    for(int i=0; i<4; i++) free(players[i]);
    }

LOBBY STATE TEST:
    code {
    games[0] = calloc(1, sizeof(game_t));
    strcpy(pl->nick, "host");
    game_create(pl, games[0]);
    for(int i=0; i<MAX_PLAYERS-1; i++){
        players[i] = calloc(1, sizeof(player_t));
        player_create(players[i]);
        sprintf(players[i]->nick, "player%d", i);
        game_add_player(games[0], players[i]);
    }
    games[0]->players[2] = NULL;

    printD("serv_acc: comm_result=%d\n", pl->comm_if.send_request(pl->comm_if.cd, SRRQ_LOBBY_STATE, games[0], sizeof(game_t)));

    game_delete(games[0]);
    for(int i=0; i<MAX_PLAYERS-1; i++) free(players[i]);
 
    }

GIMME CARD TEST:
    code{
    strcpy(pl->nick, "test");
    pl->hand[3] = 1;
    pl->face_up[0] = 5;
    pl->face_down[1] = 6;

    players[0] = calloc(1, sizeof(player_t));
    player_create(players[0]);
    strcpy(players[0]->nick, "test2");
    players[0]->hand[4] = 3;
    players[0]->face_up[2] = 9;
    players[0]->face_down[1] = J_VAL;

    games[0] = calloc(1, sizeof(game_t));
    game_create(pl,games[0]);
    game_add_player(games[0], players[0]);

    int ret, j;
    for(int i=0; i<2; i++){
        printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GAME_STATE, games[0], sizeof(game_t)));
        if(ret != COMM_OK) goto end;
        j = (player_plays_from(pl)==PL_PILE_F_DWN);
        printD("serv_acc: play_from=%d\n", j);
        printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GIMME_CARD, &j, sizeof(int)));
        if(ret != COMM_OK) goto end;
        printD("card=%d, cnt=%d\n", j&0xFF, j>>8);
        printD("serv_acc play OK=%d\n", player_play_cards(pl, j&0xFF, j>>8, games[0]->play_deck));
        printD("serv_acc: top card=%d\n", game_get_top_card(games[0]));
    }
    printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GAME_STATE, games[0], sizeof(game_t)));
    j = 1;
    printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GIMME_CARD, &j, sizeof(int)));
    printD("idx=%d, cnt=%d\n", j&0xFF, j>>8);
    j = pl->face_down[j&0xFF];
    printD("serv_acc: card=%d, play OK=%d\n",j, player_play_cards(pl, j, 1, games[0]->play_deck));
    printD("serv_acc: top card=%d\n", game_get_top_card(games[0]));

    end:
    game_delete(games[0]);
    free(players[0]);
    }

QUITTER TEST:
    mm_thread {

    printD("mm_player_thread: %d\n", ((player_t *)arg)->id);
    player_t *p = (player_t *)arg;
    while(p->comm_if.send_request(p->comm_if.cd, SRRQ_WRITE, "oLE", 0)==COMM_OK);
    close(p->comm_if.cd);
    free(p);
    return NULL;

    }

    code {

    int ret;
    printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_WRITE, "Hola", 0));
    if(ret == COMM_QUIT) {
        queue_push(&pl,Q_quiter);
        return;
    }

    }

GAME DELTER TEST:
    mm_thread {

        printD("mm_player_thread: %s\n", ((player_t *)arg)->nick);
        player_t *p = (player_t *)arg;
        if(p->comm_if.cd){
            p->comm_if.send_request(p->comm_if.cd, SRRQ_WRITE, "exit", 0);    
            close(p->comm_if.cd);
        }
        free(p);
        return NULL;
    }

    code {

        int ret;
        for(int i=0; i<MAX_PLAYERS*MAX_GAMES; i++)
        {
            players[6*i] = calloc(1, sizeof(player_t));
            player_create(players[6*i]);
            sprintf(players[6*i]->nick, "Player %d", players[6*i]->id);
        }
        players[0]->comm_if.conn_state = PL_CONN_UP;
        players[6]->comm_if.conn_state = PL_CONN_DOWN;
        players[12]->comm_if.conn_state = PL_CONN_UP;
        players[5] = pl;

        *(int *)pl->nick = pl->id;
        printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_MAIN_MENU, &pl->nick, 0));
        if(ret == COMM_QUIT) {
            for(int i=0; i<3; i++)
                free(players[6*i]);
            free(pl);
            close(connfd);
            return;
        }

        games[0] = calloc(1, sizeof(game_t));
        game_create(pl, games[0]);
        for(int i=0; i<3; i++)
            game_add_player(games[0], players[6*i]);
        printD("serv_acc: comm_result=%d\n", ret = pl->comm_if.send_request(pl->comm_if.cd, SRRQ_GAME_STATE, games[0], 0));

        queue_push(&(games[0]->id), Q_game_del);
        sleep(1);
        printD("serv_acc: dwn_pl=%p", players[6]);
    }

multiclient:
    code {
    player_t *p = (player_t *)arg;
    comm_flag_t re;
    *(int *)p->nick = p->id;
    re = p->comm_if.send_request(p->comm_if.cd, SRRQ_MAIN_MENU, p->nick, sizeof(int));
    if(re != COMM_OK)
    {
        printD("mm_player_thread: exit=%d, reason=%d\n",p->id,re);
        close(p->comm_if.cd);
        free(p);
        return NULL;
    }
    int ii=0;
    while(1)
    {
        re = p->comm_if.send_request(p->comm_if.cd, SRRQ_WRITE, "Card pls", 8);
        if(re != COMM_OK)
        {
            printD("mm_player_thread: exit=%d, reason=%d\n",p->id,re);
            close(p->comm_if.cd);
            free(p);
            return NULL;
        }
        ii=0;
        re = p->comm_if.send_request(p->comm_if.cd, SRRQ_GIMME_CARD, &ii, sizeof(int));
        if(re != COMM_OK)
        {
            printD("mm_player_thread: exit=%d, reason=%d\n",p->id,re);
            close(p->comm_if.cd);
            free(p);
            return NULL;
        }
        printf("card,cnt=%d,%d\n", (char)ii, ii>>8);
        sleep(1);
    }

    return NULL;
    }